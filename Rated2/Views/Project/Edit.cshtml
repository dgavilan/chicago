@model Rated2.Models.Project.ProjectViewModel
@using Rated.Core.Shared;

<h2>
    @if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
    {
        <span>Edit Project</span>
    }

    @if (Model.ProjectStatus == Enums.ProjectStatus.WaitingApproverAcceptance)
    {
        <span>Waiting for Reviewer</span>
    }
</h2>

<div class="alert alert-info">
    <b>Project Status:</b> @Rated.Core.Shared.EnumHelper.GetDescription(Model.ProjectStatus)

    &nbsp;&nbsp;

    @switch (Model.ProjectStatus)
    {
        case Enums.ProjectStatus.Draft:
            <button class="btn btn-success" id="btnOpenStartProjectModal">
                <span class="glyphicon glyphicon-ok-sign"></span>
                Start Project
            </button>
            break;
        case Enums.ProjectStatus.WaitingApproverAcceptance:
        <button class="btn btn-danger">
            <span class="glyphicon glyphicon-trash"></span>
            Cancel Project
        </button>
            break;
    }
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th width="70px"></th>
            <th width="75%">Project</th>
            <th width="110px">Modified</th>
            <th width="70px"></th>
        </tr>
    </thead>
    <tr>
        <td>
            @if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
            {
                <button class="btn btn-link">
                    <span class="glyphicon glyphicon-edit">
                    </span> Edit
                </button>

            }
        </td>
        <td>


            <div id="divProjectName">
                <b>@Html.DisplayFor(x => x.ProjectName)</b>
            </div>

            <div id="divProjectDescription">
                @Html.DisplayFor(x => x.ProjectDescription)
            </div>
        </td>
        <td>
            @Html.DisplayFor(x => x.ModifiedDate)
        </td>
        <td>
            @if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
            {

                <button class="btn btn-link">
                    <span class="glyphicon glyphicon-trash"></span> Delete
                </button>
            }
        </td>
    </tr>
</table>

<hr />

@if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
{
    <h4>
        Project Tasks (<span id="spanItemDetailCount">@Model.ProjectDetails.Count()</span>)
        <br />
        <button class="btn btn-link" onclick="Project.ShowAddDetail()">
            <span class="glyphicon glyphicon-plus"></span> Add Task
        </button>
        <span>|</span>
        <button class="btn btn-link" id="btnAssignReviewer">
            <span class=" glyphicon glyphicon-plus">
            </span> Assign One Reviewer to all Tasks
        </button>
    </h4>
}

<table class="table table-striped">
    <thead>
        <tr>
            <th width="70px"></th>
            <th></th>
            <th width="40%">Detail</th>
            <th>Hours</th>
            <th>Modified</th>
            <th>Status</th>
            <th width="70px"></th>
        </tr>
    </thead>
    @{
        var lineItemNo = 1;
        foreach (var detail in Model.ProjectDetails)
        {
            <tr>

                <td>
                    @if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
                    {
                        <button class="btn btn-link" onclick="Project.ShowEditDetail('@detail.ProjectDetailId', '@detail.DetailName', '@detail.DetailDescription', '@detail.HoursToComplete')">
                            <span class="glyphicon glyphicon-edit"></span> Edit
                        </button>
                    }
                </td>
                <td>
                    @lineItemNo
                </td>
                <td>
                    <b>@detail.DetailName</b>
                    <br />
                    @detail.DetailDescription
                </td>
                <td>
                    @Convert.ToDouble(detail.HoursToComplete)
                </td>
                <td width="100px">
                    @detail.ModifiedDate
                </td>
                <td>
                    @switch (detail.ReviewerStatusId)
                    {
                        case (int)Enums.ProjectReviewerStatus.Accepted:
                            <p>
                                Approver: @detail.ReviewerFullName
                            </p>
                            break;
                        case (int)Enums.ProjectReviewerStatus.Sent:
                        <p>
                            Waiting for Approver
                            <br />
                            @detail.ReviewerFullName
                            <br />
                            @if (Model.ProjectStatus == Enums.ProjectStatus.Draft)
                            {
                                <button class="btn btn-link">
                                    <span class="glyphicon glyphicon-remove"></span> Remove Reviewer
                                </button>
                            }
                        </p>
                            break;
                        case (int)Enums.ProjectReviewerStatus.NeedsReviewer:
                        <p>
                            No Reviewer
                            <br />
                            <button class="btn btn-link" onclick="Project.AssignDetailReviewer('@detail.ProjectDetailId')">
                                <span class="glyphicon glyphicon-plus"></span> Assign Reviewer
                            </button>
                        </p>
                            break;
                        case (int)Enums.ProjectReviewerStatus.Declined:
                            break;
                        default:
                        @Rated.Core.Shared.EnumHelper.GetDescription(detail.Status);
                                                                                       break;
                    }
                </td>
                <td>
                    @if (detail.Status == Enums.ProjectDetailStatus.Draft)
                    {
                        <button class="btn btn-link" onclick="Project.DeleteDetail('@detail.ProjectId', '@detail.ProjectDetailId')">
                            <span class="glyphicon glyphicon-trash"></span> Delete
                        </button>
                    }
                    else if (detail.Status == Enums.ProjectDetailStatus.InReview)
                    {
                        <button class="btn btn-success" style="width:160px" onclick="Project.ConfirmProjectDetailComplete('@detail.ProjectDetailId')">
                            <span class="glyphicon glyphicon-ok-sign"></span> Task is Complete
                        </button>

                        <div style="height:7px">&nbsp;</div>

                        <button class="btn btn-danger" style="width:160px">
                            <span class="glyphicon glyphicon-remove-sign"></span> Cancel this Task
                        </button>
                    }
                </td>

            </tr>
                    lineItemNo++;
        }
    }
</table>
<input type="hidden" id="TotalDetailCount" name="TotalDetailCount" value="@lineItemNo">

<script language="javascript">
    var openAddProjectModal = @ViewBag.OpenAddProjectModal;
</script>

<script src="~/Scripts/Rated/project.js"></script>

@Html.Partial("_ModalCompleteDetail")
@Html.Partial("_ModalAddProject")
@Html.Partial("_ModalAddItem")
@Html.Partial("_ModalStartProject")
@Html.Partial("_ModalAssignReviewer", @Model)

@Html.HiddenFor(x => x.ProjectId)
<input type="hidden" id="DetailItemNumber" name="DetailItemNumber">
<input type="hidden" id="ProjectDetailId" name="ProjectDetailId">
